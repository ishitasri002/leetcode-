class ListNode(object):
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution(object):
    def reverse(self, head):
        prev = None 
        current = head 
        while current:
            next_node = current.next 
            current.next = prev 
            prev = current
            current = next_node
        return prev 
    
    def isPalindrome(self, head):
        if head is None or head.next is None:
            return True 

        # Step 1: Find the middle of the linked list
        slow = head 
        fast = head
        while fast and fast.next: # fast pointer goes till the end when fast next is none it will stop 
            slow = slow.next
#The slow pointer moves at half the speed of the fast pointer.
#When the fast pointer reaches the end of the list, the slow pointer will be at the middle.
            fast = fast.next.next
        
        # Step 2: Reverse the second half of the linked list
        second_half = self.reverse(slow)
        first_half = head

        # Step 3: Compare the two halves
        while second_half:
            if first_half.val != second_half.val:
                return False 
            first_half = first_half.next
            second_half = second_half.next
        
        return True

