class Solution(object):
    def isValidSudoku(self, board):
        
        for row in range(9):
            check = set()
            for col in range(9):
                num = board[row][col]
                if num != '.':

                    if num in check:
                        return False 
                    else:
                        check.add(num)
                       

        for col in range(9):
            check = set() 
            for row in range(9):
                num = board[row][col]
                if num != '.':

                    if num in check:
                        return False 
                    else:
                        check.add(num)

        for bow_row in range(3):
            for bow_col in range (3):
                check = set()
                for row in range(bow_row *3, (bow_row +1)*3):
                    for col in range(bow_col *3, (bow_col +1)*3):
                        num = board[row][col]
                        if num != '.':
                            if num in check:
                                return False 
                            else:
                                check.add(num)
        return True 

sol = Solution()
board = [
    ["5","3",".",".","7",".",".",".","."],
    ["6",".",".","1","9","5",".",".","."],
    [".","9","8",".",".",".",".","6","."],
    ["8",".",".",".","6",".",".",".","3"],
    ["4",".",".","8",".","3",".",".","1"],
    ["7",".",".",".","2",".",".",".","6"],
    [".","6",".",".",".",".","2","8","."],
    [".",".",".","4","1","9",".",".","5"],
    [".",".",".",".","8",".",".","7","9"]
]

# Call the method correctly with parentheses and pass the board
result = sol.isValidSudoku(board)





                    

        





        
