class TreeNode:
    def __init__(self, value=0, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right

def preorder_traversal(root):
    result = []
    stack = []
    
    if root is None:
        return result
    
    stack.append(root)
    
    while stack:
        current = stack.pop()
        result.append(current.value)
        
        # Push right child first so that left child is processed first
        if current.right:
            stack.append(current.right)
        if current.left:
            stack.append(current.left)
    
    return result

# Example usage:
# Constructing the binary tree:
#      4
#     / \
#    2   8
#   / \ / \
#  1  3 5  9
#            / \
#           7  10
root = TreeNode(4)
root.left = TreeNode(2)
root.right = TreeNode(8)
root.left.left = TreeNode(1)
root.left.right = TreeNode(3)
root.right.left = TreeNode(5)
root.right.right = TreeNode(9)
root.right.right.left = TreeNode(7)
root.right.right.right = TreeNode(10)

print(preorder_traversal(root))  # Output: [4, 2, 1, 3, 8, 5, 9, 7, 10]
