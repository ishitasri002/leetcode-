class ListNode(object):
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution(object):
    def reverse(self, head):
        prev = None 
        current = head 
        while current:
            next_node = current.next 
            current.next = prev  # This line is crucial for reversing the list
            prev = current 
            current = next_node 
        return prev 
             
    def reorderList(self, head):
        if head is None or head.next is None:
            return
        
        # Step 1: Find the middle of the list
        slow, fast = head, head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        
        # Step 2: Reverse the second half of the list
        second_half = self.reverse(slow.next)
        slow.next = None  # Split the list into two halves
        
        # Step 3: Merge the two halves
        first_half = head
        while second_half:
            # Save next pointers
            temp1 = first_half.next
            temp2 = second_half.next
            
            # Rearrange pointers
            first_half.next = second_half
            second_half.next = temp1
            
            # Move to the next nodes in each half
            first_half = temp1
            second_half = temp2
